{"version":3,"sources":["todo/bucket.jsx","todo/todo.jsx","App.js","serviceWorker.js","index.js"],"names":["Bucket","props","bucketItemsMap","buckets","map","bucket","bucketId","onClick","setCurrentBucketId","key","className","selectedBucketId","name","Fragment","ToDo","todosMap","todos","filter","obj","todoId","readOnly","todoStatus","style","textDecoration","placeholder","onChange","e","handleChangeToDoDesc","value","todoDesc","trim","class","deleteThisTodo","toggleCompleteStatus","App","scrollToBottom","messagesEnd","scrollIntoView","behavior","state","currentBucketName","handleBucketNameChange","bind","handleClickCreateNewBucket","createNewTodo","id","this","setState","target","bId","newBID","bucketScrollView","newtodoId","todoScrollView","todo1","i","findIndex","splice","todo2","ref","element","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.fef407bf.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nfunction Bucket(props) {\r\n  const bucketItems = props.buckets;\r\n  const bucketItemsMap = bucketItems.map((bucket) =>\r\n    bucket.bucketId === 0 ? (\r\n      \"\"\r\n    ) : (\r\n      <div\r\n        onClick={() => props.setCurrentBucketId(bucket.bucketId)}\r\n        key={bucket.bucketId}\r\n        className=\"bucket-buttons\"\r\n      >\r\n        <div\r\n          className={\r\n            props.selectedBucketId === bucket.bucketId\r\n              ? \"bucket-item active\"\r\n              : \"bucket-item\"\r\n          }\r\n        >\r\n          <p>{bucket.name}</p>\r\n        </div>\r\n      </div>\r\n    )\r\n  );\r\n\r\n  return <React.Fragment>{bucketItemsMap}</React.Fragment>;\r\n}\r\n\r\nexport default Bucket;\r\n","import React from \"react\";\r\n\r\nfunction ToDo(props) {\r\n  const statusStyle = {\r\n    complete: \"line-through\",\r\n  };\r\n  const todosMap =\r\n    props.selectedBucketId === 0\r\n      ? \"\"\r\n      : props.todos\r\n          .filter((obj) => obj.bucketId === props.selectedBucketId)\r\n          .map((obj) => (\r\n            <div key={obj.todoId} className=\"todo-item\">\r\n              <div className=\"tooltip\">\r\n                <input\r\n                  readOnly={obj.todoStatus ? true : false}\r\n                  style={\r\n                    obj.todoStatus\r\n                      ? { textDecoration: \"line-through\" }\r\n                      : { textDecoration: \"none\" }\r\n                  }\r\n                  placeholder=\"\"\r\n                  onChange={(e) => props.handleChangeToDoDesc(e, obj.todoId)}\r\n                  value={obj.todoDesc}\r\n                ></input>\r\n                {obj.todoDesc.trim() === \"\" ? (\r\n                  \"\"\r\n                ) : (\r\n                  <span class=\"tooltiptext\">{obj.todoDesc}</span>\r\n                )}\r\n              </div>\r\n              <button onClick={() => props.deleteThisTodo(obj.todoId)}>\r\n                delete\r\n              </button>\r\n              <button onClick={() => props.toggleCompleteStatus(obj.todoId)}>\r\n                {obj.todoStatus ? \"mark incomplete\" : \"mark complete\"}\r\n              </button>\r\n            </div>\r\n          ));\r\n\r\n  return <React.Fragment> {todosMap}</React.Fragment>;\r\n}\r\n\r\nexport default ToDo;\r\n","import React from \"react\";\nimport \"./App.css\";\nimport Bucket from \"./todo/bucket\";\nimport ToDo from \"./todo/todo\";\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      buckets: [{ bucketId: 0, name: \"\" }],\n      todos: [{ bucketId: 0, todoId: 0, todoDesc: \"\", todoStatus: false }],\n      bucketId: 0,\n      todoId: 0,\n      currentBucketName: \"\",\n      selectedBucketId: 0,\n    };\n    this.handleBucketNameChange = this.handleBucketNameChange.bind(this);\n    this.handleClickCreateNewBucket = this.handleClickCreateNewBucket.bind(\n      this\n    );\n    this.setCurrentBucketId = this.setCurrentBucketId.bind(this);\n    this.createNewTodo = this.createNewTodo.bind(this);\n    this.deleteThisTodo = this.deleteThisTodo.bind(this);\n    this.toggleCompleteStatus = this.toggleCompleteStatus.bind(this);\n    this.handleChangeToDoDesc = this.handleChangeToDoDesc.bind(this);\n  }\n\n  async setCurrentBucketId(id) {\n    await this.setState({\n      selectedBucketId: this.state.selectedBucketId === id ? 0 : id,\n    });\n  }\n  async handleBucketNameChange(e) {\n    await this.setState({\n      currentBucketName: e.target.value,\n    });\n  }\n  async handleClickCreateNewBucket() {\n    if (this.state.currentBucketName !== \"\") {\n      let bId = this.state.bucketId;\n      const newBID = ++bId;\n      const currentBucketName = this.state.currentBucketName;\n      await this.setState({\n        buckets: [\n          ...this.state.buckets,\n          {\n            bucketId: newBID,\n            name: currentBucketName,\n          },\n        ],\n        currentBucketName: \"\",\n        bucketId: newBID,\n        selectedBucketId: newBID,\n      });\n      this.bucketScrollView.scrollIntoView({ behavior: \"smooth\" });\n    }\n  }\n\n  scrollToBottom = () => {\n    this.messagesEnd.scrollIntoView({ behavior: \"smooth\" });\n  };\n  async createNewTodo() {\n    let todoId = this.state.todoId;\n    const newtodoId = ++todoId;\n    await this.setState({\n      todos: [\n        ...this.state.todos,\n        {\n          bucketId: this.state.selectedBucketId,\n          todoId: newtodoId,\n          todoDesc: \"\",\n          todoStatus: false,\n        },\n      ],\n      todoId: newtodoId,\n    });\n    this.todoScrollView.scrollIntoView({ behavior: \"smooth\" });\n  }\n\n  async deleteThisTodo(todoId) {\n    let todo1 = [...this.state.todos];\n    const i = todo1.findIndex((obj) => obj.todoId === todoId);\n    todo1.splice(i, 1);\n    await this.setState({\n      todos: todo1,\n    });\n  }\n  async toggleCompleteStatus(todoId) {\n    let todo1 = [...this.state.todos];\n\n    const todo2 = todo1.map((obj) =>\n      obj.todoId === todoId\n        ? {\n            bucketId: obj.bucketId,\n            todoId: obj.todoId,\n            todoDesc: obj.todoDesc,\n            todoStatus: !obj.todoStatus,\n          }\n        : obj\n    );\n\n    await this.setState({\n      todos: todo2,\n    });\n  }\n\n  async handleChangeToDoDesc(e, todoId) {\n    let todo1 = [...this.state.todos];\n\n    const todo2 = todo1.map((obj) =>\n      obj.todoId === todoId\n        ? {\n            bucketId: obj.bucketId,\n            todoId: obj.todoId,\n            todoDesc: e.target.value,\n            todoStatus: obj.todoStatus,\n          }\n        : obj\n    );\n\n    await this.setState({\n      todos: todo2,\n    });\n  }\n\n  render() {\n    return (\n      <React.Fragment>\n        <div className=\"App\">\n          <h1>\n            <p>Todo App</p>\n          </h1>\n\n          <div className=\"bucket\">\n            <div className=\"bucket-create\">\n              <input\n                onChange={(e) => {\n                  this.handleBucketNameChange(e);\n                }}\n                value={this.state.currentBucketName}\n                placeholder=\"Enter Bucket Name...\"\n              ></input>\n\n              <button onClick={this.handleClickCreateNewBucket}>\n                Create Bucket\n              </button>\n            </div>\n            <Bucket\n              setCurrentBucketId={this.setCurrentBucketId}\n              buckets={this.state.buckets}\n              selectedBucketId={this.state.selectedBucketId}\n            />\n            <div\n              ref={(element) => {\n                this.bucketScrollView = element;\n              }}\n            />\n          </div>\n          <div className=\"todo\">\n            <ToDo\n              todos={this.state.todos}\n              selectedBucketId={this.state.selectedBucketId}\n              deleteThisTodo={this.deleteThisTodo}\n              toggleCompleteStatus={this.toggleCompleteStatus}\n              handleChangeToDoDesc={this.handleChangeToDoDesc}\n            />\n\n            {this.state.selectedBucketId === 0 ? (\n              <p className=\"getStarted\">\n                Please select/add some Buckets to get started\n              </p>\n            ) : (\n              <div onClick={this.createNewTodo} className=\"addnewtodo\">\n                <p>Add New Task</p>\n              </div>\n            )}\n            <div\n              ref={(element) => {\n                this.todoScrollView = element;\n              }}\n            />\n          </div>\n        </div>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}